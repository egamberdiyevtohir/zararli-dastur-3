import tkinter as tk
from tkinter import filedialog, messagebox
import requests
import socket
import pyperclip
import netifaces as ni

def get_local_ip():
    interfaces = ni.interfaces()
    for interface in interfaces:
        try:
            ifaddresses = ni.ifaddresses(interface)
            ip = ifaddresses[ni.AF_INET][0]['addr']
            if ip.startswith('192'):
                return ip
        except:
            continue
    return None

def get_ip_info():
    ip = ip_entry.get()
    url = f"https://rest.db.ripe.net/search.json?query-string={ip}&type-filter=inetnum"
    response = requests.get(url)
    data = response.json()
    
    if "objects" in data and "object" in data["objects"]:
        ip_info = data["objects"]["object"][0]
        inetnum = ip_info.get("primary-key").get("attribute")[0].get("value")
        netname = ip_info.get("attributes").get("attribute")[1].get("value")
        country_code = ""
        for attr in ip_info.get("attributes").get("attribute"):
            if attr.get("name") == "country":
                country_code = attr.get("value")
                break
        created = ""
        last_modified = ""
        for attr in ip_info.get("attributes").get("attribute"):
            if attr.get("name") == "created":
                created = attr.get("value")
            elif attr.get("name") == "last-modified":
                last_modified = attr.get("value")
        
        ip_info_text = f"IP: {ip}\nCountry: {country_code}\nInetnum: {inetnum}\nNetname: {netname}\nCreated: {created}\nLast Modified: {last_modified}"
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, ip_info_text)
        pyperclip.copy(ip_info_text)
        
        # Enable save button
        save_button.config(state=tk.NORMAL)
    else:
        messagebox.showerror("Error", "Ma'lumot topilmadi")

def check_ports(ip, ports):
    open_ports = []
    for port in ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((ip, port))
                if result == 0:
                    open_ports.append(port)
        except Exception as e:
            print(f"Xatolik: {e}")
    return open_ports

def display_open_ports():
    ip = ip_entry.get()
    port_range = port_entry.get().split('-')
    start_port = int(port_range[0])
    end_port = int(port_range[1])
    ports = range(start_port, end_port + 1)
    open_ports = check_ports(ip, ports)
    if open_ports:
        open_ports_text = "Ochiq portlar:\n" + ', '.join(map(str, open_ports))
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, open_ports_text)
    else:
        messagebox.showinfo("Ochiq Portlar", "Ochiq port topilmadi")
def save_ip_info():
    ip = ip_entry.get()
    url = f"https://rest.db.ripe.net/search.json?query-string={ip}&type-filter=inetnum"
    response = requests.get(url)
    data = response.json()
    
    if "objects" in data and "object" in data["objects"]:
        ip_info = data["objects"]["object"][0]
        inetnum = ip_info.get("primary-key").get("attribute")[0].get("value")
        netname = ip_info.get("attributes").get("attribute")[1].get("value")
        country_code = ""
        for attr in ip_info.get("attributes").get("attribute"):
            if attr.get("name") == "country":
                country_code = attr.get("value")
                break
        created = ""
        last_modified = ""
        for attr in ip_info.get("attributes").get("attribute"):
            if attr.get("name") == "created":
                created = attr.get("value")
            elif attr.get("name") == "last-modified":
                last_modified = attr.get("value")
        
        ip_info_text = f"IP: {ip}\nCountry: {country_code}\nInetnum: {inetnum}\nNetname: {netname}\nCreated: {created}\nLast Modified: {last_modified}"
        
        # Open file dialog to choose save location
        filename = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if filename:
            with open(filename, "w") as f:
                f.write(ip_info_text)
            messagebox.showinfo("Save", f"Ma'lumotlar saqlandi va '{filename}' fayliga export qilindi")
    else:
        messagebox.showerror("Error", "Ma'lumot topilmadi")

root = tk.Tk()
root.title("IP Scanner")

ip_label = tk.Label(root, text="IP Manzil:")
ip_label.grid(row=0, column=0, padx=10, pady=10)

local_ip = get_local_ip()
ip_entry = tk.Entry(root)
if local_ip:
    ip_entry.insert(0, local_ip)
ip_entry.grid(row=0, column=1, padx=10, pady=10)

port_label = tk.Label(root, text="Port Diapazoni")
port_label.grid(row=1, column=0, padx=10, pady=10)

port_entry = tk.Entry(root)
port_entry.grid(row=1, column=1, padx=10, pady=10)

scan_button = tk.Button(root, text="Scan", command=get_ip_info)
scan_button.grid(row=2, column=0, columnspan=2, padx=10, pady=10, sticky="we")

port_button = tk.Button(root, text="Ochiq Portlarni Tekshirish", command=display_open_ports)
port_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10, sticky="we")

output_text = tk.Text(root, height=10, width=50)
output_text.grid(row=4, column=0, columnspan=2, padx=10, pady=10, sticky="we")

save_button = tk.Button(root, text="Ma'lumotlarni Saqlash", command=save_ip_info, state=tk.DISABLED)
save_button.grid(row=5, column=0, columnspan=2, padx=10, pady=10, sticky="we")

root.mainloop()
